import ca.rmen.lfrc.FrenchRevolutionaryCalendar

import java.text.SimpleDateFormat

buildscript {
    apply from: 'versions.gradle'
    apply from: 'repos.gradle'

    repositories.addRepos()

    dependencies {
        classpath "ca.rmen:lib-french-revolutionary-calendar:$versions.libs.frc"
    }
}

// Add a 'release' task that increments the build number
def releaseTask = tasks.create(name: 'release', group: 'build')
releaseTask.doLast {
    buildNumberProperties.buildNumber = (buildNumber + 1).toString()
    buildNumberProperties.store(buildNumberFile.newWriter(), null)
}

// Make the 'release' task depend on the 'assembleRelease' task of every subprojects
subprojects {
    tasks.whenTaskAdded { task ->
        if (task.name == 'assembleRelease') {
            releaseTask.dependsOn task
        }
    }
}

// Returns the name of the current git branch
def gitBranch() {
    new ProcessBuilder('git', "--git-dir=${rootDir}/.git", "--work-tree=${rootDir}", 'rev-parse', '--abbrev-ref', 'HEAD').start().text.trim()
}

// Returns the SHA1 of the current git commit
def gitSha1() {
    new ProcessBuilder('git', "--git-dir=${rootDir}/.git", "--work-tree=${rootDir}", 'rev-parse', '--short', 'HEAD').start().text.trim()
}

// Returns the current date/time formatted in UTC
static def buildDate() {
    def dateFormat = new SimpleDateFormat('yyyy-MM-dd\'T\'HH:mm\'Z\'')
    dateFormat.setTimeZone(TimeZone.getTimeZone('UTC'))
    return dateFormat.format(new Date())
}

// This only for amusement purposes
static def getFrenchDate() {
    def frenchDate = new FrenchRevolutionaryCalendar(Locale.FRENCH, FrenchRevolutionaryCalendar.CalculationMethod.ROMME).getDate(GregorianCalendar.getInstance())
    "Le ${frenchDate.weekdayName} ${frenchDate.dayOfMonth} ${frenchDate.monthName} de l'an ${frenchDate.year}. (${frenchDate.objectTypeName} du jour : ${frenchDate.objectOfTheDay})"
}

// Returns a file on the project's root - creates it from a sample if it doesn't exist
def getAndCreateIfNotExists(String fileName) {
    def res = file(fileName)
    if (!res.exists()) {
        logger.warn("$fileName file does not exist: creating it now - please check its values")
        copy {
            from "${fileName}.SAMPLE"
            into project.projectDir
            rename { fileName }
        }
    }
    return res
}

// Build properties
ext.buildProperties = new Properties()
def buildPropertiesFile = getAndCreateIfNotExists('build.properties')
buildProperties.load(new FileInputStream(buildPropertiesFile))

// Build number
ext.buildNumberProperties = new Properties()
ext.buildNumberFile = getAndCreateIfNotExists('build.number')
buildNumberProperties.load(new FileInputStream(buildNumberFile))
ext.buildNumber = buildNumberProperties.buildNumber.toInteger()

// Build info
ext.gitBranch = gitBranch()
ext.gitSha1 = gitSha1()
ext.buildDate = buildDate()

// Splash screen
println """\n
====================================\u001B[95m
     _____  ___   ____
 __ / / _ \\/ _ | / __/___  _______ _
/ // / , _/ __ |/ _/_/ _ \\/ __/ _ `/
\\___/_/Â¦_/_/ |_/_/ (_)___/_/  \\_, /
                             /___/
\u001B[0m
Building ${globalProjectName}.

${getFrenchDate()}

rootDir: ${rootDir}
buildDate: ${buildDate}
versionCode: ${buildNumberProperties.buildNumber}
versionName: ${buildProperties.versionName}
gitBranch: ${gitBranch}
gitSha1: ${gitSha1}

====================================
"""
