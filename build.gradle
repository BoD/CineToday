// Top-level build file where you can add configuration options common to all sub-projects/modules.
ext.globalProjectName = 'CineToday'

buildscript {
    apply from: 'versions.gradle'
    apply from: 'repos.gradle'

    repositories.addRepos()

    dependencies {
        classpath "ca.rmen:lib-french-revolutionary-calendar:$versions.libs.frc"
        classpath "com.android.tools.build:gradle:$versions.plugins.androidGradle"
        classpath "com.github.ben-manes:gradle-versions-plugin:$versions.plugins.gradleVersions"
        classpath "io.fabric.tools:gradle:$versions.plugins.fabric"
        classpath "com.getkeepsafe.dexcount:dexcount-gradle-plugin:$versions.plugins.dexCount"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        // See https://android-developers.googleblog.com/2018/05/announcing-new-sdk-versioning.html
        classpath "com.google.android.gms:strict-version-matcher-plugin:$versions.plugins.gmsStrictVersionMatcher"
    }
}

allprojects {
    repositories.addRepos()

    // Force using our version of the support libraries, even for those we don't depend on directly (transitive dependencies)
    configurations.all {
        resolutionStrategy {
            eachDependency { details ->
                if (details.requested.group == 'com.android.support'
                        && details.requested.name != 'multidex'
                        && details.requested.name != 'multidex-instrumentation') {
                    details.useVersion versions.supportLibrary
                }
            }
        }
    }

    // Show a report in the log when running tests
    tasks.withType(Test) {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task wrapper(type: Wrapper) {
    gradleVersion = versions.build.gradle
    distributionType = Wrapper.DistributionType.ALL
}

// Run './gradlew dependencyUpdates' to see new versions of dependencies
apply plugin: 'com.github.ben-manes.versions'
dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { selection ->
            boolean rejected = [/*'alpha', 'beta', 'rc',*/ '20050927'].any { qualifier ->
                selection.candidate.version.toLowerCase() ==~ /.*-${qualifier}.*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

apply from: 'misc.gradle'