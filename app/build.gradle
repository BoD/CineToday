apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
if (buildProperties.enableFabric.toBoolean()) apply plugin: 'io.fabric'
// Disabled because not compatible with the Gradle Android Plugin v3.x
//apply plugin: 'com.getkeepsafe.dexcount'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId 'org.jraf.android.cinetoday'
        minSdkVersion 25
        targetSdkVersion versions.targetSdk
        versionCode buildNumber
        versionName buildProperties.versionName

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        buildConfigField 'String', 'GIT_SHA1', "\"${gitSha1}\""
        buildConfigField 'String', 'BUILD_DATE', "\"${buildDate}\""
        // For now we enable strict mode for all the configs
        buildConfigField 'boolean', 'STRICT_MODE', 'true'
        // For now we enable debug logs all the configs
        buildConfigField 'boolean', 'DEBUG_LOGS', 'true'

        resConfigs 'en', 'fr'

        // Useful for api keys in the manifest (Maps, Crashlytics, ...)
        manifestPlaceholders = buildProperties

        // Setting this to true disables the png generation at buildtime
        // (see http://android-developers.blogspot.fr/2016/02/android-support-library-232.html)
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            storeFile file(buildProperties.signingStoreFile)
            storePassword buildProperties.signingStorePassword
            keyAlias buildProperties.signingKeyAlias
            keyPassword buildProperties.signingKeyPassword
        }
    }

    buildTypes {
        debug {
            buildConfigField 'boolean', 'CRASH_REPORT', 'false'
        }

        release {
            buildConfigField 'boolean', 'CRASH_REPORT', 'true'

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            shrinkResources true
            signingConfig signingConfigs.release
        }
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        abortOnError true
        textReport true
        ignoreWarnings true
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

android.applicationVariants.all { variant ->
    // Create new copy tasks, for release builds
    if (variant.buildType.name == 'release') {
        variant.outputs.each { output ->
            def outputFile = file("build/outputs/apk/release/$output.outputFileName")
            def apkName = "${globalProjectName}-${project.name}-${android.defaultConfig.versionCode}-${variant.flavorName}-signed.apk"

            // Copy the apk to the 'etc' folder
            def copyApkToEtc = tasks.create("copy${variant.name.capitalize()}ApkToEtc", Copy)
            copyApkToEtc.from(outputFile)
            copyApkToEtc.into('../etc/apk')
            copyApkToEtc.rename output.outputFileName, apkName

            // Copy the apk to the deploy folder
            def copyApkToDeploy = tasks.create("copy${variant.name.capitalize()}ApkToDeploy", Copy)
            copyApkToDeploy.from(outputFile)
            copyApkToDeploy.into(buildProperties.deployFolder)
            copyApkToDeploy.rename output.outputFileName, apkName

            // Make the copy tasks run after the assemble tasks of the variant
            variant.assemble.finalizedBy(copyApkToEtc, copyApkToDeploy)
        }
    }
}

dependencies {
    androidTestCompile("com.android.support.test.espresso:espresso-core:$versions.espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile "junit:junit:$versions.junit"
    testCompile "org.robolectric:robolectric:$versions.robolectric"
    testCompile "org.easytesting:fest-assert-core:$versions.fest"

    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$versions.kotlin"

    // Support library
    compile "com.android.support:support-fragment:$versions.supportLibrary"
    compile "com.android.support:support-annotations:$versions.supportLibrary"
    compile "com.android.support:percent:$versions.supportLibrary"
    compile "com.android.support:palette-v7:$versions.supportLibrary"

    //  Wear
    provided "com.google.android.support:wearable:$versions.androidWearable"
    provided "com.google.android.wearable:wearable:$versions.androidWearable"

    // Play Services
    compile "com.google.android.gms:play-services-gcm:$versions.playServices"

    // Fabric / Crashlytics
    compile("com.crashlytics.sdk.android:crashlytics:$versions.crashlytics@aar") { transitive = true }

    // JRAF
    kapt "org.jraf:prefs-compiler:$versions.prefs"
    compile "org.jraf:prefs:$versions.prefs"
    compile 'com.github.BoD:jraf-android-util:-SNAPSHOT'
//    compile 'org.jraf:jraf-android-util:1.0.0'

    // OkHttp
    compile "com.squareup.okhttp3:okhttp:$versions.okHttp"

    // Glide
    compile "com.github.bumptech.glide:glide:$versions.glide"
    compile "com.github.bumptech.glide:okhttp3-integration:$versions.glideOkHttp@jar"

    // Dagger
    compile "com.google.dagger:dagger:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    provided "javax.annotation:jsr250-api:$versions.jsr250"

    // Necessary to have Kotlin and dataBinding at the same time
    kapt "com.android.databinding:compiler:$versions.androidGradlePlugin"

    // Architecture components
    compile "android.arch.lifecycle:runtime:$versions.arch"
    compile "android.arch.lifecycle:extensions:$versions.arch"
    kapt "android.arch.lifecycle:compiler:$versions.arch"

    // Room
    compile "android.arch.persistence.room:runtime:$versions.arch"
    kapt "android.arch.persistence.room:compiler:$versions.arch"
}
repositories {
    mavenCentral()
}

// Necessary for Prefs to work (see https://kotlinlang.org/docs/reference/kapt.html)
kapt {
    correctErrorTypes = true
}